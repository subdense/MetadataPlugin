# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Pir_V4
                                 A QGIS plugin
 This plugins allows edition and sharing of medata.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by ENSG
        email                : aubin.bettiol@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from email.encoders import encode_noop
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QRectF
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsLayerTreeModel, Qgis
from qgis.gui import QgsLayerTreeView
import json

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .pir_v4_dockwidget import Pir_V4DockWidget
import os.path


class Pir_V4:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pir_v4_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&pir_v4')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'pir_v4')
        self.toolbar.setObjectName(u'pir_v4')

        #print "** INITIALIZING pir_v3"

        self.pluginIsActive = False
        self.dockwidget = None

        self.layer_dir = ''
        self.layers = [] #Les noms des couches du tableau des couches (len = 3 a pri)
        self.dict1 = {}
        self.dict2 = {}
        self.dict3 = {}
        self.ids = {}
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('pir_v4', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pir_v4/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING pir_v4"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD pir_v4"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&pir_v4'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING pir_v4"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = Pir_V4DockWidget()

                
                self.getDirPath() #initialise self.layer_dir
                #self.getLayers() #initialise self.layers
                self.initCommIds() #initialise self.ids

                self.promptJSON()

                self.dockwidget.valid.clicked.connect(lambda : self.updateJSON())

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def promptJSON(self):
        '''
            Affiche les fichiers de métadonnées dans les cadres adaptés
        '''
        self.dockwidget.text1.setText(self.readLayerJson("GUF1",self.layer_dir))
        self.dockwidget.text2.setText(self.readLayerJson("GUF2",self.layer_dir))
        self.dockwidget.text3.setText(self.readLayerJson("GUF3",self.layer_dir))


    def getDirPath(self):
        '''
            Recupère le chemin du dossier de la couche active
        '''

        layer = self.iface.activeLayer()
        layer_path = layer.dataProvider().dataSourceUri()
        layer_dir, layer_name = os.path.split(layer_path)
        self.layer_dir = layer_dir

        return layer_dir
    
    def getLayers(self):
        '''
            Recupère l'ensemble des couches du projets
        '''
        layers = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        layers.append(layers[0] + '_COMPARAISON_' + layers[1]) #Ici on aimerait se passer du libellé 'COMPARAISON' pour identifier le nom des deux couches

        self.layers = layers

    def readLayerJson(self, layer_name, layer_dir):
        '''
            Lit le JSON lié au nom d'une couche, renvoie une chaîne de caractères
            fidèle au JSON
        '''
        str = ''
        
        with open(layer_dir + '\\' + layer_name + '.json', 'r', encoding='utf8') as fs: 
            self.dict1 =  json.load(fs)
            for pkey in self.dict1.keys():
                str += '\n' + 'COMMENTAIRE : ' + pkey[pkey.find('_')+1:] + '\n \n'
                self.ids[layer_name].append(pkey)
                for skey in self.dict1[pkey].keys():
                    str += "\t" + skey + ' : ' + self.dict1[pkey][skey] + '\n \n'
        return str

    def updateJSON(self):
        '''
            Enregistre les commentaires de l'utilisateur dans le fichier JSON
            Crée une sauvegarde de l'ancien fichier
        '''

        dict1 = {"date" : self.dockwidget.date.text(), "auteur" : self.dockwidget.auteur.text(), "commentaire" : self.dockwidget.comment1.toPlainText()}
        dict2 = {"date" : self.dockwidget.date.text(), "auteur" : self.dockwidget.auteur.text(), "commentaire" : self.dockwidget.comment2.toPlainText()}
        dict3 = {"date" : self.dockwidget.date.text(), "auteur" : self.dockwidget.auteur.text(), "commentaire" : self.dockwidget.comment3.toPlainText()}


        modif = [dict1, dict2, dict3]

        jsonName = ["GUF1", "GUF2", "GUF3"]

        for layer_name in jsonName:
            dico = modif[jsonName.index(layer_name)]

            id = int(self.ids[layer_name][-1][self.ids[layer_name][-1].find("_")+1:])+1

            path = self.layer_dir + "\\" + layer_name + '.json'

            fs = open(path, 'r', encoding='utf8')
            dictJson = json.load(fs)
            fs.close()
            fd = open(path, 'w', encoding='utf8')      
            dictJson.update({"comment_" + str(id) : dico})
            json.dump(dictJson, fd, indent=3)
            fd.close()
                    

        self.iface.messageBar().pushMessage("Bravo ", "Les modifications ont bien été prises en compte !", level=Qgis.Success, duration=3)
        self.promptJSON()         

    def initCommIds(self):
        '''
            Initialise le dictionnaire qui contient en clé les noms de couche et en valeur la liste d'id des commentaires avec une liste vide
        '''

        jsonName = ["GUF1", "GUF2", "GUF3"]


        for layer_name in jsonName:
            self.ids[layer_name] = []
            